function [A B]=Bal_N(k,u,d,P)

%k = [k1 k2 k3 ...] where ki is the number of nodes in the ith community
%d = [d1,d2] edge density percentage or parameter for inner d1 and inter d2
%P = [P1,P2] negative edge percentage for inner P1 and inter P2
%u = 1 ------ Inside and outside are all generated by RandUS;
%             d = [d1 d2] where d1 is the probability inside and d2 is the
%             probability outside
%u = 2 ------ Inside generated by PLUS while outside by RandUS;
%             d = [d1 d2] where d1 is the power law expononcial inside
%             and d2 is the random probability of edges outside
%u = 3 ------ Inside and outside are all generated by PLUS at once;
%u = 4 ------ Abs matrix satisfies uni degree distribution(UniUS)
%u = 6 ------ Inside and outside generated with differentd uni degree;
%
%
%    %%%%% undirected clusters with directed inter cluster edges %%%%%
%
%u = 5 ------ Inside and outside generated with differentd power law
%             distribution [d1 d2] where d1 is the exp inside and d2 is the
%             exp outside with P percent negative;
%
%
%   %%%%% The following cases are for Directed graphs where the %%%%%
%       %%%%% clusters pocess Perron Frobenius properties %%%%%
%                           Choose P1=0
%u = 7 ------ Inside generated with Uni degree directed graphs.
%             Outside generated with PL with P2 percent negative;
%u = 8 ------ Inside generated with Uni degree directed graphs.
%             Outside generated with Uni with P2 percent negative;
%
%
%   %%%%% The following cases are for Directed graphs where the %%%%%
%       %%%%% clusters pocess Perron Frobenius properties %%%%%
%                         
%u = 9 ------ Inside generated with Uni degree directed graphs with density
%             k1 and negative percentage P1. Outside generated with Uni
%             density k2 and negative percentage P2;
%
%
%   %%%%% Examples with each case %%%%%
% k, 1, [0.3, 0.25]
% k, 5, [1.3, 1.3], [0, 0.2]
% k, 5, [1.3, 1.3], [0, 0.5]
% k, 7, [0.2, 1.3], [0, 1] Inner 0.2 UNI, Inter PL with alpha 1.3, 100% of
% inter are negative
% k, 7, [0.2, 1.3], [0, 0.5] Inner 0.2 UNI, Inter PL with alpha 1.3, 50% of
% inter are negative
% k, 8, [0.4, 0.2], [0, 0.3] Inner 0.4 UNI, Inter Sprand with density 0.2,
% 30% of inter are negative
% k, 9, [0.4, 0.2], [0.1, 0.3] Inner 0.4 UNI 10% percent negative edges,
% Inter Sprand with density 0.2, 30% of inter are negative


[m,N]=size(k);

K = cumsum(k);
K = [0 K];
B=sparse(K(N+1),K(N+1));
A=[];
if u==1
    if d(1) == d(2)
        A = RandUS(K(N+1),d(1));
        %B=sparse(K(N+1),K(N+1));
        for i = 1:N
            for j = (i+1):N
                B((K(i)+1):K(i+1),(K(j)+1):K(j+1))= -A((K(i)+1):K(i+1),(K(j)+1):K(j+1));
                B((K(j)+1):K(j+1),(K(i)+1):K(i+1))= -A((K(i)+1):K(i+1),(K(j)+1):K(j+1))';
            end;
        end;
        
    else
        %         for i = 1:N
        %             A = blkdiag(A,RandUS(k(i),d(1)));
        %         end;
        %B=sparse(size(A,1),size(A,1));
        A=B;
        for i = 1:N
            A(K(i)+1:K(i+1),K(i)+1:K(i+1)) = PLUS(k(i),5,d(1));
            for j = (i+1):N
                p = -RandUS((k(i)+k(j)),d(2));
                B((K(i)+1):K(i+1),(K(j)+1):K(j+1))= p(1:k(i),(k(i)+1):(k(i)+k(j)));
                B((K(j)+1):K(j+1),(K(i)+1):K(i+1))= p(1:k(i),(k(i)+1):(k(i)+k(j)))';
            end;
        end;
    end;
elseif u==2
    %     A1=A;
    %     A=[];
    %         for i = 1:N
    %             PL=PLUS(k(i),5,d(1));
    %         A = blkdiag(A,PL);
    %         A1(K(i)+1:K(i+1),K(i)+1:K(i+1)) = PL;
    %         K(i)+1
    %         K(i+1)
    %         end;
    
    % to avoid out of memory by repeatedly adding more diagonal block
    % components, A has to be sparse in the begining other than A=[]
    % All the other sections of this function need to be changed accordingly
    A=B;
    for i = 1:N
        A(K(i)+1:K(i+1),K(i)+1:K(i+1)) = PLUS(k(i),5,d(1));
        for j = (i+1):N
            p = -RandUS((k(i)+k(j)),d(2));
            B((K(i)+1):K(i+1),(K(j)+1):K(j+1))= p(1:k(i),(k(i)+1):(k(i)+k(j)));
            B((K(j)+1):K(j+1),(K(i)+1):K(i+1))= p(1:k(i),(k(i)+1):(k(i)+k(j)))';
        end;
    end;
elseif u==3
    A = PLUS(K(N+1),8,d(1));
    for i = 1:N
        for j = (i+1):N
            B((K(i)+1):K(i+1),(K(j)+1):K(j+1))= -A((K(i)+1):K(i+1),(K(j)+1):K(j+1));
            B((K(j)+1):K(j+1),(K(i)+1):K(i+1))= -A((K(i)+1):K(i+1),(K(j)+1):K(j+1))';
        end;
    end;
    A = A+B;
elseif u==4
    A = UniUS(K(N+1));
    for i = 1:N
        for j = (i+1):N
            B((K(i)+1):K(i+1),(K(j)+1):K(j+1))= -A((K(i)+1):K(i+1),(K(j)+1):K(j+1));
            B((K(j)+1):K(j+1),(K(i)+1):K(i+1))= -A((K(i)+1):K(i+1),(K(j)+1):K(j+1))';
        end;
    end;
    A = A+B;
elseif u==5% symmetric Communities with asymetric PL inter cluster edges
    A=B;
    for i = 1:N
        warning('PLUS2 on diagonal')
        i
        
        %R = PLUS2(d(1),5500,13);
        R = PLUS2(d(1),9000/(200000/k(1)),15);
        A(K(i)+1:K(i+1),K(i)+1:K(i+1)) = R(1:k(i),1:k(i));
        
        
        for j = (i+1):N
            warning('PLUS3 on off diagonal Upper')
            j
            
            %            PL=PLUS2(d(2),3300,9);
            %            PL=PL(1:k(i),1:k(j));
            PL=PLUS3(d(2),round(min(k(i),k(j))/250),5,k(i),k(j));
            nz=find(PL);
            rd=randperm(size(nz,1),ceil(P(2)*size(nz,1)));
            size(rd)
            size(nz)
            PL(nz(rd))=-1;
            sum(sum(PL>0))
            sum(sum(PL<0))
            B((K(i)+1):K(i+1),(K(j)+1):K(j+1))= PL;
            
            warning('PLUS3 on off diagonal Lower')
            PL=PLUS3(d(2),round(min(k(i),k(j))/250),5,k(j),k(i));
            nz=find(PL);
            rd=randperm(size(nz,1),ceil(P(2)*size(nz,1)));
            size(rd)
            size(nz)
            PL(nz(rd))=-1;
            sum(sum(PL>0))
            sum(sum(PL<0))
            B((K(j)+1):K(j+1),(K(i)+1):K(i+1))= PL;
            %B((K(j)+1):K(j+1),(K(i)+1):K(i+1))= p(1:k(i),(k(i)+1):(k(i)+k(j)))';
        end;
    end;
elseif u==6
    for i = 1:N
        A = blkdiag(A,UniUs(k(i)));
    end;
    for i = 1:N
        for j = (i+1):N
            p = -UniUS((k(i)+k(j)));
            B((K(i)+1):K(i+1),(K(j)+1):K(j+1))= p(1:k(i),(k(i)+1):(k(i)+k(j)));
            B((K(j)+1):K(j+1),(K(i)+1):K(i+1))= p(1:k(i),(k(i)+1):(k(i)+k(j)))';
        end;
    end;
elseif u== 7% Asymmetric PFn Communities with asymetric PL inter cluster edges
    A=B;
    for i = 1:N
        warning('RandUS_Directed on diagonal')
        i
        A(K(i)+1:K(i+1),K(i)+1:K(i+1)) =RandUS_Directed(k(i),d(1));
        for j = (i+1):N
            j
            warning('PLUS3 on off diagonal Upper')
            PL=PLUS3(d(2),round(min(k(i),k(j))/5),15,k(i),k(j));
            if P(2)>0
                nz=find(PL);
                rd=randperm(size(nz,1),ceil(P(2)*size(nz,1)));
                size(rd)
                size(nz)
                PL(nz(rd))=-1;
                sum(sum(PL>0))
                sum(sum(PL<0))
            end;
            B((K(i)+1):K(i+1),(K(j)+1):K(j+1))= PL;
            
            warning('PLUS3 on off diagonal Lower')
            PL=PLUS3(d(2),round(min(k(i),k(j))/5),15,k(j),k(i));
            if P(2)>0
                nz=find(PL);
                rd=randperm(size(nz,1),ceil(P(2)*size(nz,1)));
                size(rd)
                size(nz)
                PL(nz(rd))=-1;
                sum(sum(PL>0))
                sum(sum(PL<0))
            end;
            B((K(j)+1):K(j+1),(K(i)+1):K(i+1))= PL;
            
        end;
    end;
elseif u==8% asymmetric PFn clusters with Sprand inter edges
    A=B;
    for i = 1:N
        warning('RandUS_Directed on diagonal')
        i
        A(K(i)+1:K(i+1),K(i)+1:K(i+1)) = RandUS_Directed(k(i),d(1));
        for j = (i+1):N
            j
            % upper
            SP1=sprand(k(i),k(j),d(2));
            if P(2)>0
                nz=find(SP1);
                rd=randperm(size(nz,1),ceil(P(2)*size(nz,1)));
                size(rd)
                size(nz)
                SP1(nz(rd))=-1;
                sum(sum(SP1>0))
                sum(sum(SP1<0))
            end;
            B((K(i)+1):K(i+1),(K(j)+1):K(j+1))=SP1;
            % lower
            SP2=sprand(k(j),k(i),d(2));
            if P(2)>0
                nz=find(SP2);
                rd=randperm(size(nz,1),ceil(P(2)*size(nz,1)));
                size(rd)
                size(nz)
                SP2(nz(rd))=-1;
                sum(sum(SP2>0))
                sum(sum(SP2<0))
            end;
            B((K(j)+1):K(j+1),(K(i)+1):K(i+1))= SP2;
        end;
    end;
elseif u==9% asymmetric PFn clusters of mixed signs with Sprand inter edges
    A=B;
    for i = 1:N
        warning('RandUS_Directed on diagonal')
        i
        A(K(i)+1:K(i+1),K(i)+1:K(i+1)) = RandUS_Di_Neg(k(i),d(1),P(1));
        for j = (i+1):N
            j
            % upper
            SP1=sprand(k(i),k(j),d(2));
            if P(2)>0
                nz=find(SP1);
                rd=randperm(size(nz,1),ceil(P(2)*size(nz,1)));
                size(rd)
                size(nz)
                SP1(nz(rd))=-1;
                sum(sum(SP1>0))
                sum(sum(SP1<0))
            end;
            B((K(i)+1):K(i+1),(K(j)+1):K(j+1))=SP1;
            % lower
            SP2=sprand(k(j),k(i),d(2));
            if P(2)>0
                nz=find(SP2);
                rd=randperm(size(nz,1),ceil(P(2)*size(nz,1)));
                size(rd)
                size(nz)
                SP2(nz(rd))=-1;
                sum(sum(SP2>0))
                sum(sum(SP2<0))
            end;
            B((K(j)+1):K(j+1),(K(i)+1):K(i+1))= SP2;
        end;
    end;
     
end;
